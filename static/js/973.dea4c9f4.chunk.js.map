{"version":3,"file":"static/js/973.dea4c9f4.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/initialState.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","redux/filter/filter-selectors.js","components/Filter/Filter.jsx","components/ContactList/ContactList.module.css","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","redux/contacts/contacts-selectors.js","webpack://react-homework-template/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx","shared/components/Button/Button.jsx","shared/hooks/useForm.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"contactFormInput\":\"ContactForm_contactFormInput__eC5HJ\",\"contactFormButton\":\"ContactForm_contactFormButton__gvoPv\"};","const initialState = {\n  name: '',\n  number: '',\n};\n\nexport default initialState;\n","import PropTypes from 'prop-types';\nimport css from './ContactForm.module.css';\nimport initialState from './initialState';\nimport useForm from 'shared/hooks/useForm';\n\nconst ContactForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm(initialState, onSubmit);\n  const { name, number } = state;\n  return (\n    <form className={css.contactForm} onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          className={css.contactFormInput}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        ></input>\n      </label>\n\n      <label>\n        Number\n        <input\n          className={css.contactFormInput}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button className={css.contactFormButton} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterLabel\":\"Filter_filterLabel__+pnW-\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","export const getFilter = store => store.filter;\n","import css from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/filter/filter-selectors';\nimport { setFilter } from 'redux/filter/filrter-slice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(getFilter);\n\n  const changeFilter = ({ target }) => {\n    const action = setFilter(target.value);\n    dispatch(action);\n  };\n\n  return (\n    <div className={css.filterLabel}>\n      <label>\n        Find contact by name\n        <input\n          className={css.filterInput}\n          type=\"text\"\n          value={filter}\n          onChange={changeFilter}\n        />\n      </label>\n    </div>\n  );\n};\n\n\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {};","import Button from 'shared/components/Button/Button';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\n\nconst Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const onDeleteContact = contactId => {\n    const action = deleteContact(contactId);\n    dispatch(action);\n  };\n\n  return (\n    <>\n      <div>\n        <p>\n          {name}: {number}\n        </p>\n      </div>\n      <Button onClick={() => onDeleteContact(id)}>Delete contact</Button>\n    </>\n  );\n};\n\nexport default Contact;\n","import PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\nimport Contact from 'components/Contact/Contact';\n\nconst ContactList = ({ contacts }) => {\n  const elements = contacts.map(({ id, name, number }) => (\n    <li className={css.contactListItem} key={id}>\n      <Contact id={id} name={name} number={number}></Contact>\n    </li>\n  ));\n\n  return <ul className={css.contactList}>{elements}</ul>;\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","export const getAllContacts = store => store.contacts.items;\nexport const getFilteredContacts = store => {\n  if (!store.filter) {\n    return store.contacts.items;\n  }\n  const normalizedFilter = store.filter.toLowerCase();\n  return store.contacts.items.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n\nexport const getIsLoading = store => store.contacts.isLoading;\n\nexport const getError = store => store.contacts.error;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsPage_container__BnqXB\"};","import ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport {\n  getAllContacts,\n  getError,\n  getFilteredContacts,\n  getIsLoading,\n} from 'redux/contacts/contacts-selectors';\nimport { addContact } from 'redux/contacts/contacts-operations';\n\nimport css from './ContactsPage.module.css';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  const contacts = useSelector(getAllContacts);\n  const filteredContacts = useSelector(getFilteredContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n\n\n  const isDuplicate = name => {\n    if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contact list`);\n      return true;\n    }\n  };\n\n  const onAddContact = ({ name, number }) => {\n    if (isDuplicate(name)) {\n      return;\n    }\n    const action = addContact({ name, number });\n    dispatch(action);\n  };\n\n  return (\n    <div className={css.container}>\n      <ContactForm onSubmit={onAddContact} />\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      {filteredContacts.length > 0 && (\n        <ContactList contacts={filteredContacts} />\n      )}\n    </div>\n  );\n};\n\nexport default ContactsPage;\n","const Button = ({ type = 'button', children }) => {\n  return (\n    <button  type={type}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import { useState } from 'react';\n\nconst useForm = ({ initialState, onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n\nexport default useForm;\n"],"names":["name","number","onSubmit","useForm","initialState","state","handleChange","handleSubmit","className","css","type","pattern","title","required","value","onChange","getFilter","store","filter","dispatch","useDispatch","useSelector","target","action","setFilter","id","Button","onClick","contactId","deleteContact","onDeleteContact","elements","contacts","map","getAllContacts","items","getFilteredContacts","normalizedFilter","toLowerCase","contact","includes","getIsLoading","isLoading","getError","error","filteredContacts","useEffect","fetchContacts","find","alert","isDuplicate","addContact","length","children","useState","setState","event","prevState","preventDefault"],"sourceRoot":""}